In this version (v6) following changes are made:

*   routes/post.js : A new route to create post for group 

        // Logic to create group post:
        router.post('/group/:group_id', function(req, res){
            var previousURL = helperFunctions.previousURL(req.headers.referer)
            var newPost = {
                body : req.body.body,
                authorId : req.user._id,
                authorName : req.user.name,
                authorUsername : req.user.username
            }
            
            Post.create(newPost)
            .then(function(createdPost){
                Group.findOne({_id : req.params.group_id})
                .then(function(foundGroup){
                    createdPost.groupId = foundGroup._id
                    createdPost.save()
                    foundGroup.posts.push(createdPost)
                    foundGroup.save()
                    res.redirect(previousURL)
                })
                .catch(function(error){
                    console.log("Error")
                    res.redirect(previousURL)
                })
            })
            .catch(function(error){
                console.log("Error")
                res.redirect(previousURL)
            })
        })


*   routes/group.js : Logic to extract filtered group posts and render group/group

        router.get("/:group_id", function(req, res){
            var previousURL = helperFunctions.previousURL(req.headers.referer)
            var startDate = helperFunctions.startDate()
            Group.findOne({_id : req.params.group_id}).populate("users")
            .then(function(foundGroup){
                Post.find({groupId : req.params.group_id, created : {$gte : startDate}}).sort({created : -1}).limit(20)
                .then(function(SortedPosts){
                    res.render("group/group", {Group: foundGroup, SortedPosts: SortedPosts})
                })
                .catch(function(error){
                    
                })
            })
            .catch(function(error){
                res.redirect(previousURL)
            })
        })



*   views/group/group : Display form for creating 'group post' and Display posts

        <!--Displaying form to create post-->
        <form action="/user/<%=currentUser._id%>/posts/group/<%=Group._id%>" method="POST">
            <label for="post">Create New Post</label>
            <input type="text" name="body" id="post" placeholder="Enter post">
            <button>Submit</button>
        </form>
        
        
        <!--Displaying posts here-->
        <%SortedPosts.forEach(function(foundPost){%>
            <div><%=foundPost.body%></div>
            <div>By: <%=foundPost.authorName%> (<%=foundPost.authorUsername%>)</div>
            <%if(foundPost.authorUsername == currentUser.username){%>
                <form action="/user/<%=currentUser._id%>/posts/<%=foundPost._id%>/?_method=DELETE" method='POST'>
                    <button>Delete</button>
                </form>
                <form action="/user/<%=currentUser._id%>/posts/<%=foundPost._id%>/edit" method='GET'>
                    <button>Edit</button>
                </form>
            <%}%>
            <hr>
        <%})%>
        
        
*   routes/explore : filtered posts of explored user:

        // Explore a Specific user
        router.get("/:explore_user_id", function(req, res){
            var previousURL = helperFunctions.previousURL(req.headers.referer)
            Post.find({authorId : req.params.explore_user_id, groupId : null, teamId : null}).sort({created : -1})
            // We don't want posts of team or group
            .then(function(foundPosts){
                User.findOne({_id : req.params.explore_user_id})
                .then(function(foundUser){
                    res.render("explore/index", {Posts : foundPosts, User : foundUser})
                })
                .catch(function(error){
                    res.redirect(previousURL)  
                })
            })
            .catch(function(error){
                console.log("Error")
                res.redirect(previousURL)
            })
        })

        
